var conn = [];//コネクションリスト
var querystring = require('querystring');
var originIsAllowed = function(){return true;}
var WebSocketServer = require('websocket').server;
//var server = ws.createServer();

var server = require('http').createServer(
	function(request, response){
		console.log((new Date()) + " Received request for " + request.url);
		response.writeHead(404);
		response.end();
	}
);

//ポート
server.listen(
	'8001',function(){
			console.log('listen:8001');
	}
);

ws = new WebSocketServer({
	'httpServer' : server,
	autoAcceptConnections:false
});

//ソケットが開かれた
ws.on('request',function(request){
	var connected = 0;
	if(!originIsAllowed(request.origin)) {
		request.reject();
		console.log((new Date()) + " Connection from origin " + request.origin + " rejected.");
		return;
	}
	var str = request.httpRequest.url.split('?')[1];//クエリ文字列
	var query = querystring.parse(str);//クエリをパース
	
	var con = request.accept(null,request.origin);
	var state = {'connected':false,'room':0,'wait':false,'con':con};
	conn.push(state);

	var master;//接続先
	var user = conn.length-1;//自分

	console.log('enter:'+user);

	//接続したときに接続相手を探す（接続してきた順）
	master = search(user);

	if(master != -1){//親がいた
		connect(master,user);//接続
	}else{
		console.log('waiting:'+user);
	}
	con.on('close',function(mg){
		con.closed = true;
		console.log('leave:'+user);
	});
});


//接続-----------------------------------------------------------------------
function connect(master,user){
	conn[master].connected = true;
	conn[user].connected = true;

	console.log('<master '+master+"> connected:"+master+","+user);
	//子の設定
	setAction(user,master);
	//親の設定
	setAction(master,user);
}

//接続後の通信設定
function setAction(user1,user2){
	conn[user1].con.on('message',function(mg){
		console.log(user1+' To '+user2);
		var data = mg.binaryData;
		conn[user2].con.sendBytes(mg.binaryData);
	});
	
	conn[user1].con.on('close',function(ms){
		console.log('closed:'+user1);
		user1 = search(user2);//待機の中から次に接続する人を探す。
		if(user1 != -1){
			connect(user1,user2);//待機者が見つかった。
		}else{
			initConnect(user2);//残った方を待機状態に
		}
	});

	var data = new Uint8Array(1);
	data[0] = 0;
	conn[user1].con.send(data);
}

//接続したときに接続相手を探す（接続してきた順）
function search(user){
	for(var i = 0 ; i < conn.length ; i++){
		if(!conn[i].con.closed && conn[user].con !== conn[i].con && conn[i].connected == false && conn[user].room == conn[i].room){
			return i;
		}
	}
	return -1;
}


//接続を初期化
function initConnect(user){
	conn[user].connected = false;
	console.log('waiting:'+user);
	conn[user].con.removeAllListeners('message');
	conn[user].con.removeAllListeners('close');
}
//--------------------------------------------------------------------------

